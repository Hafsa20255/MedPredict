
import streamlit as st
import pandas as pd
import joblib
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.preprocessing import LabelEncoder

# Configuration de la page Streamlit
st.set_page_config(
    page_title="MedPredict - Maintenance Pr√©dictive",
    layout="wide",
    initial_sidebar_state="expanded"
)

# üé® Charger le CSS externe
with open("style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# üñºÔ∏è Logo de l'application
st.image("logo.png", width=200)

# Titre de l'application
st.title("Maintenance Pr√©dictive des √âquipements M√©dicaux")
st.subheader("Pr√©disez les pannes des dispositifs m√©dicaux gr√¢ce √† l'IA")

# Charger le mod√®le et le scaler
model = joblib.load('modele_pfe.pkl')
scaler = joblib.load('scaler_pfe.pkl')

# Upload du fichier Excel
uploaded_file = st.file_uploader("üìÇ Upload un fichier Excel contenant les logs :", type=['xlsx'])

if uploaded_file is not None:
    # Lire le fichier
    df = pd.read_excel(uploaded_file)
    st.write("üìÑ **Aper√ßu des donn√©es upload√©es :**")
    st.dataframe(df.head())

    # Pr√©traitement : supprimer les colonnes inutiles
    X = df.drop(columns=['Label', 'ID_√©v√©nement'], errors='ignore')

    # Encoder les colonnes texte
    le = LabelEncoder()
    if 'Module_concern√©' in X.columns:
        X['Module_concern√©'] = le.fit_transform(X['Module_concern√©'])

    # Normaliser les donn√©es
    X_scaled = scaler.transform(X)

    # Pr√©dire avec Random Forest
    predictions = model.predict(X_scaled)
    df['Pr√©diction'] = predictions

    # Afficher les r√©sultats
    st.write("üîÆ **R√©sultats des pr√©dictions :**")
    st.dataframe(df)

    # T√©l√©charger les r√©sultats (version am√©lior√©e)
    def convert_df(df):
        # Renommer les colonnes pour plus de clart√©
        df.columns = [col.replace('_', ' ').capitalize() for col in df.columns]
        return df.to_csv(index=False, sep=';', encoding='utf-8').encode('utf-8')

    csv = convert_df(df)
    st.download_button("üíæ T√©l√©charger les r√©sultats am√©lior√©s", data=csv, file_name='resultats_predictions.csv', mime='text/csv')

    # Rapport de classification
    if 'Label' in df.columns:
        y_true = df['Label']
        y_pred = df['Pr√©diction']
        st.subheader("üìä Rapport de classification")
        report = classification_report(y_true, y_pred, output_dict=True)
        st.dataframe(pd.DataFrame(report).transpose())

        # Matrice de confusion
        st.subheader("üî≤ Matrice de confusion")
        cm = confusion_matrix(y_true, y_pred)
        fig, ax = plt.subplots()
        sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', ax=ax)
        ax.set_xlabel('Pr√©dit')
        ax.set_ylabel('R√©el')
        st.pyplot(fig)
